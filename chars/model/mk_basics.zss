# This file holds every basic move that's not in the
# default common1 file. Made by OpenMK Team.

# ---------------------------------------------
# FUNCTIONS
# ---------------------------------------------

# Used to call a character voicebyte.
[Function CharVoice(bank, index)]
playSnd{value: s $bank, $index; channel: 0}

# Used to call a character sound effect.
[Function CharSFX(bank, index)]
playSnd{value: s $bank, $index; channel: 1}

# Used to call a common.snd sound.
[Function ComSound(bank, index)]
playSnd{value: f $bank, $index; channel: 2}

# Transition for block.
[Function HiToLoAndLoToHi()]
if command = "holddown" && stateType = S {
	stateTypeSet{stateType: C; physics: C}
} else if stateType = C {
	stateTypeSet{stateType: S; physics: S}
}

# Stop blocking!
[Function StopGuarding()]
if command != "block" {
	changeState{value: const(StateGuard_end)}
}

# High punch hitbox.
[Function PunchHitboxH()]
hitDef {
	attr: S,NA;
	hitflag: MAF;
	guardflag: MA;
	animtype: light;
	air.animtype: back;
	damage: 66,18;
	sparkno: -1;
	guard.sparkno: -1;
	hitsound: f2,0 + random%2;
	guardsound: f3,0;
	ground.type: high;
	ground.slidetime: 12;
	guard.slidetime: 12;
	ground.hittime: 12;
	guard.hittime: 12;
	air.hittime: 20;
	yaccel: 0.4375;
	ground.velocity: 0,0;
	guard.velocity: -2;
	air.velocity: -3,-6;
	p2facing: 1;
	ground.cornerpush.veloff: 0;
	air.fall: 1;
	fall.recover: 0;
	kill: 1;
	guard.kill: 1;
	fall.kill: 1;
	guard.dist: 80;
}

# Low punch hitbox.
[Function PunchHitboxL()]
hitDef {
	attr: S,NA;
	hitflag: MAF;
	guardflag: MA;
	animtype: light;
	air.animtype: back;
	damage: 48,12;
	sparkno: -1;
	guard.sparkno: -1;
	hitsound: f2,30 + random%2;
	guardsound: f3,0;
	ground.type: low;
	ground.slidetime: 12;
	guard.slidetime: 12;
	ground.hittime: 12;
	guard.hittime: 12;
	air.hittime: 20;
	yaccel: 0.4375;
	ground.velocity: 0,0;
	guard.velocity: -2;
	air.velocity: -3,-6;
	p2facing: 1;
	ground.cornerpush.veloff: 0;
	air.fall: 1;
	fall.recover: 0;
	kill: 1;
	guard.kill: 1;
	fall.kill: 1;
	guard.dist: 80;
}

# This calls buffer commands for all punches.
[Function PunchBuffer()]

# Debug.
#displayToClipboard{text: "punches so far = %f"; params: map(consecutivePunchCount)}

# Reset punch variable.
# TODO: Unfinished, to improve later.
#if (time = 0 && prevStateNo != [const(StateHighPunchI),const(StateLowPunchII)]) {
#	map(consecutivePunchCount) := 0;
#}

# Reset command buffer variable.
if time < 1 {
	map(commandBuffer) := 0;
}

# Buffer the next punch.
if command = "x" { # High Punch
	if time = [1,13] {
		map(commandBuffer) := 1;
	}
} else if command = "a" { # Low Punch
	if time = [1,13] {
		map(commandBuffer) := 2;
	}
} else if command = "b" || command = "run" || command = "y" || command = "block" { # Jab Cancel
	if time = [3,10] {
		map(commandBuffer) := 3;
	}
}

# Jab cancel animation.
if map(commandBuffer) = 3 && animElemTime(4) = 2 {
	changeAnim{value: anim; elem: 5}
}

# Keep track of punches dealt.
# This will trigger the lock system.
# TODO: Unfinished, to improve later.
#if moveContact = 1 {
#	map(consecutivePunchCount) := map(consecutivePunchCount) + 1;
#}

# ---------------------------------------------
# BASIC MOVES
# ---------------------------------------------

# OpenMK common content
[StateDef -2]

# This constant enables common things for MK.
if const(OpenMK.Char.Enabled) = 1 {
	assertSpecial{flag: nostandguard; flag2: nocrouchguard; flag3: noairguard}
	assertSpecial{flag: nokovelocity; flag2: nokosnd}

	# ---------------------------------------------
	# Run bar logic
	
	# Variable 1 is defined when you leave the run state.
	# If player has exited run state without them
	# actually wanting to, variable will be forced to 1.
	if moveType = H || !map(leaveRunState) && stateNo != const(StateRun) {
		map(leaveRunState) := 1;
	}

	# This will make it so if you stop running, the RunReload will
	# deplete from 380 to 0 so the bar refills.
	if map(leaveRunState) {
		map(runReload) := map(runReload) - 20;
	}

	# Limit it so it doesn't go below 0.
	if map(runReload) <= 0 {
		map(runReload) := 0;
	}

	# When reload time hits 0, refill the bar again 'til it's max.
	if numExplod(10000) = 0 && map(leaveRunState) = 1 && power < powerMax {
		if map(runReload) = 0 {
			powerAdd{value: 20}
		}
	}
}

# ---------------------------------------------
# Stand
[StateDef const(StateStand); type: S; physics: S; sprPriority: 0;]

# Change animation depending of turn state.
if cond(anim = const(AnimStandTurning), animTime = 0, anim != const(AnimStanding)) {
	changeAnim{value: const(AnimStanding)}
}

# Stop falling down.
if time = 0 {
	velSet{y: 0}
	posSet{y: 0}
}

# Friction stuff.
if time = 4 || abs(vel x) < cond(majorVersion = 1,
	const(movement.stand.friction.threshold), 2) {
	velSet{x: 0}
}

# If dead.
if !alive {
	changeState{value: const(StateAirGetHit_falling); ctrl: 0}
}

# ---------------------------------------------
# Jump Start
[StateDef const(StateJumpStart); type: S; physics: S; anim: const(AnimJumpStart_onGround);
ctrl: 0; sprPriority: 1; facep2: 1;]

# Set direction for movement.
if time = 0 {
	call CharVoice(1,1);
}

# Change speed depending of above variable.
if command = "holdfwd" {
	let x = const(velocity.jump.fwd.x); # Forward Roll
} else if command = "holdback" {
	let x = const(velocity.jump.back.x); # Back Roll
} else {
	let x = const(velocity.jump.neu.x); # Neutral Jump
}

# Apply velocity.
velSet{x: $x; y: const(velocity.jump.y)}

# End of state.
selfState{value: const(StateJumpUp); ctrl: 1}

# ---------------------------------------------
# Jump Land
[StateDef const(StateJumpLand); type: S; physics: S; ctrl: 0;
anim: const(AnimJumpLanding);]

# Stop moving.
if time = 0 {
	velSet{x: 0; y: 0}
	posSet{y: 0}
} else if time > 3 { # Apply control
	ctrlSet{value: 1}
}

# Turn around to see enemy player.
if p2Dist x < 0 && time = 0 {
	turn{}
}

# End of state.
if animTime = 0 {
	selfState{value: const(StateStand); ctrl: 1}
}

# ---------------------------------------------
# Run forward
[StateDef const(StateRunForward); type: S; physics: S;
sprPriority: 1;]

# Check if animation 100 exists.
# Otherwise, use normal animation as failsafe.
# Meant to mimic Playstation's MK Trilogy MK1/MK2 chars.
# TODO: Is this truly needed?
if !selfAnimExist(const(AnimRunFwdOrHopForward)) {
	changeAnim{value: const(AnimWalkingForwards)}
} else {
	changeAnim{value: const(AnimRunFwdOrHopForward)}
}

# Limit some movements.
# In MK3 you can't crouch during walk and run.
assertSpecial{flag: nowalk; flag2: nocrouch; flag3: noautoturn}

# Apply X velocity from constants.
velSet{x: const(velocity.run.fwd.x)}

# Deplete run bar.
powerAdd{value: -20}

# This resets run stuffs.
# Also, makes character yell.
if time = 0 {
	map(leaveRunState) := 0;
	map(runReload) := 1000;
	call CharVoice(1,0);
}

# Footstep sounds.
if time%15 = 0 {
	call ComSound(11,0 + random%4);
}

# Play run animation. Play failsafe one first.
# TODO: Is this truly needed?
if !selfAnimExist(const(AnimRunFwdOrHopForward)) {
	if anim != const(AnimWalkingForwards) && anim != const(AnimStandTurning)
		|| anim = const(AnimStandTurning) && animTime = 0 {
		changeAnim{value: const(AnimWalkingForwards)}
	}
} else {
	if anim != const(AnimRunFwdOrHopForward) && anim != const(AnimStandTurning)
		|| anim = const(AnimStandTurning) && animTime = 0 {
		changeAnim{value: const(AnimRunFwdOrHopForward)}
	}
}

# This resets timer just in case you've exited the run state.
# Done so run bar reloads correctly.
if power <= 0 || command != "holdfwd" || (command = "holdup" || command = "holdfwd" || command = "holdback") {
	map(leaveRunState) := 1;
}

# If player has no more power, just stop.
if power <= 0 {
	if command = "holdfwd" {
		selfState{value: const(StateWalk); ctrl: 1}
	} else {
		selfState{value: const(StateStand); ctrl: 1}
	}
} else { # Still, stop even with power.
	if command != "holdfwd" {
		selfState{value: const(StateStand); ctrl: 1}
	}
}

# ---------------------------------------------
# Stand Block [Start]
[StateDef const(StateGuard_start); type: U; physics: U; ctrl: 0;]

# Change animation.
# Air block is disabled for MK characters,
# as they never blocked mid-air.
if time = 0 {
	if stateType = C {
		changeAnim{value: const(AnimStartGuarding_crouch)}
	} else {
		changeAnim{value: const(AnimStartGuarding_stand)}
	}
	if stateType = S { # If standing.
		stateTypeSet{physics: S}
	} else if stateType = C { # If crouching.
		stateTypeSet{physics: C}
	}
}

# Make them go from low to high.
call HiToLoAndLoToHi();

# End of state.
if animTime = 0 {
	if stateType = C {
		changeState{value: const(StateCrouchGuard_guarding)}
	} else {
		changeState{value: const(StateStandGuard_guarding)}
	}
}

# Stop guarding.
call StopGuarding();

# ---------------------------------------------
# Stand Block [Guard]
[StateDef const(StateStandGuard_guarding); type: S; physics: S;
ctrl: 0;]

# Change animation.
if anim != const(AnimGuard_stand) {
	changeAnim{value: const(AnimGuard_stand)}
}

# End of state.
if command = "holddown" {
	selfState{value: const(StateCrouchGuard_guarding)}
}

# Stop guarding.
call StopGuarding();

# ---------------------------------------------
# Crouch Block [Guard]
[StateDef 131; type: C; physics: C; ctrl: 0;]

# Change animation.
if anim != const(AnimGuard_crouch) {
	changeAnim{value: const(AnimGuard_crouch)}
}

# End of state.
if command != "holddown" {
	selfState{value: const(StateStandGuard_guarding)}
}

# Stop guarding.
call StopGuarding();

# ---------------------------------------------
# Block [End]
[StateDef const(StateGuard_end); type: U; physics: U; ctrl: 0;]

# Change animation.
if time = 0 {
	if stateType = C {
		changeAnim{value: const(AnimStopGuarding_crouch)}
	} else {
		changeAnim{value: const(AnimStopGuarding_stand)}
	}
	if stateType = S {
		stateTypeSet{physics: S}
	} else if stateType = C {
		stateTypeSet{physics: C}
	}
}

# Make them go from low to high.
call HiToLoAndLoToHi();

if stateType = S {
	if animTime = 0 {
		selfState{value: const(StateStand); ctrl: 1}
	}
} else if stateType = C {
	if animTime = 0 {
		selfState{value: const(StateCrouching); ctrl: 1}
	}
}

# ---------------------------------------------
# Win Pose
# Override it if your character has special stuff.
[StateDef const(StateWin); type: S; ctrl: 0;
anim: const(AnimWin); velSet: 0,0;]

# Don't hit me, I won already!
notHitBy{value: SCA; time: 1}

# ---------------------------------------------
# High Punch I
[StateDef const(StateHighPunchI); type: S; moveType: A; physics: S;
velSet: 0,0; ctrl: 0;
anim: cond(prevStateNo != const(StateHighPunchII), const(AnimHighPunchInit), const(AnimHighPunchI));]

# Play a wind sound. Impactful!
if time = 0 {
	call ComSound(1,0 + random%2);
	call CharVoice(2,0 + random%2);
}

# TODO: Fix all punch limiter stuff.
# Limiter for punches has *kicked*.
#persistent(0) if map(consecutivePunchCount) >= 5 {
#	stateTypeSet{moveType: I}
#}

# Send P2 away and stop punching.
#if moveHit && target,stateType != A && map(consecutivePunchCount) >= 5 {
#	targetState{value: 5060}
#}

# Hitbox for the move.
if !moveContact {
	call PunchHitboxH();
}

# This calls command buffering system.
call PunchBuffer();

# Move on to next punch state.
if map(commandBuffer) = 1 || map(commandBuffer) = 2 {
	if time = 10 {
		if map(commandBuffer) = 2 {
			selfState{value: const(StateLowPunchII)}
		} else {
			selfState{value: const(StateHighPunchII)}
		}
	}
}

# End of state.
if animTime = 0 {
	selfState{value: 0; ctrl: 1}
}

# ---------------------------------------------
# High Punch II
[StateDef const(StateHighPunchII); type: S; moveType: A; physics: S;
velSet: 0,0; ctrl: 0; anim: const(AnimHighPunchII);]

# Play them attacking. Impactful!
if time = 0 {
	call ComSound(1,10 + 2*(random%2));
	call CharVoice(2,0 + random%2);
	#if map(consecutivePunchCount) > 5 { # Reset punch variable.
	#	map(consecutivePunchCount) := 0;
}

# Send P2 away and stop punching.
#if moveHit && target,stateType != A && map(consecutivePunchCount) >= 5 {
#	stateTypeSet{moveType: I}
#	targetState{value: 5060}
#}

# Hitbox for the move.
if !moveContact {
	call PunchHitboxH();
}

# This calls command buffering system.
call PunchBuffer();

# Move on to next punch state.
if map(commandBuffer) = 1 || map(commandBuffer) = 2 {
	if time = 10 {
		if map(commandBuffer) = 2 {
			selfState{value: const(StateLowPunchI)}
		} else {
			selfState{value: const(StateHighPunchI)}
		}
	}
}

# End of state.
if animTime = 0 {
	selfState{value: 0; ctrl: 1}
}

# ---------------------------------------------
# Low Punch I
[StateDef const(StateLowPunchI); type: S; moveType: A; physics: S;
velset: 0,0; ctrl: 0;
anim: cond(prevStateNo != const(StateLowPunchII), const(AnimLowPunchInit), const(AnimLowPunchI));]

# Play them attacking. Impactful!
if time = 0 {
	call ComSound(1,10 + 2*(random%2));
	call CharVoice(2,0 + random%2);
}

# Limiter for punches has *kicked*.
#persistent(0) if map(consecutivePunchCount) >= 5 {
	# Send P2 away and stop punching.
#	if moveHit && target,stateType != A {
#		targetState{value: 5060}
#	}
#	stateTypeSet{moveType: I}
#	assertSpecial{flag: animfreeze}
#}

# Hitbox for the move.
if !moveContact {
	call PunchHitboxL();
}

# This calls command buffering system.
call PunchBuffer();

# Move on to next punch state.
if map(commandBuffer) = 1 || map(commandBuffer) = 2 {
	if time = 10 {
		if map(commandBuffer) = 2 {
			selfState{value: const(StateLowPunchII)}
		} else {
			selfState{value: const(StateHighPunchII)}
		}
	}
}

# End of state.
if animTime = 0 {
	selfState{value: 0; ctrl: 1}
}

# ---------------------------------------------
# Low Punch II
[StateDef const(StateLowPunchII); type: S; moveType: A; physics: S;
velSet: 0,0; ctrl: 0; anim: const(AnimLowPunchII);]

# Play them attacking. Impactful!
if time = 0 {
	call ComSound(1,10 + 2*(random%2));
	call CharVoice(2,0 + random%2);
}

# Limiter for punches has *kicked*.
#persistent(0) if map(consecutivePunchCount) >= 5 {
	# Send P2 away and stop punching.
#	if moveHit && target,stateType != A {
#		targetState{value: 5060}
#	}
#	stateTypeSet{moveType: I}
#	assertSpecial{flag: animfreeze}
#}

# Hitbox for the move.
if !moveContact {
	call PunchHitboxL();
}

# This calls command buffering system.
call PunchBuffer();

# Move on to next punch state.
if map(commandBuffer) = 1 || map(commandBuffer) = 2 {
	if time = 10 {
		if map(commandBuffer) = 1 {
			selfState{value: const(StateHighPunchI)}
		} else {
			selfState{value: const(StateLowPunchI)}
		}
	}
}

# End of state.
if animTime = 0 {
	selfState{value: 0; ctrl: 1}
}

# ---------------------------------------------
# Punch Corner Limiter
# TODO: Adapt to constants style.
# This was ported from MKII Remix as-is.
# It's probably not accurate to original games.
# To be used in MK2/MK3 styles, as MK1 makes P1
# get to the stumble/stagger state instead.
[StateDef 260; type: S; moveType: I; physics: N;
velSet: -7,0; ctrl: 0;]

# Freeze animation immediately.
assertSpecial{flag: animfreeze}

# Decelerate.
if time > 11 {
	velMul{x: 0.5}
}

# End of state.
if time = 24 {
	selfState{value: 0 + 10*(command = "holddown"); ctrl: 1}
}

# ---------------------------------------------
# High Kick
[StateDef const(StateHighKick); type: S; moveType: A; physics: S;
velSet: 0,0; ctrl: 0; anim: const(AnimHighKick);]

# Play them attacking. Impactful!
if time = 0 {
	call ComSound(1,10 + 2*(random%2));
	call CharVoice(2,0 + random%2);
}

# If P2 has a custom reaction, use it.
# In MK, kicks have different anims.
# TODO: Adapt to constants style.
ignoreHitPause persistent(0) if enemy,selfAnimExist(6010) && moveHit {
	targetState{value: 5002}
}

# Hitbox for the move.
if !moveContact {
	hitDef {
		attr: S,NA;
		hitflag: MAF;
		guardflag: MA;
		animtype: medium;
		air.animtype: back;
		pausetime: 12,0;
		damage: 144,30;
		sparkno: -1;
		guard.sparkno: -1;
		hitsound: f2,20 + random%2;
		guardsound: f3,1;
		ground.type: high;
		ground.slidetime: 18;
		guard.slidetime: 12;
		ground.hittime: 12;
		guard.hittime: 12;
		air.hittime: 20;
		ground.velocity: -4.5,0;
		guard.velocity: -2;
		air.velocity: -3.5,-6;
		p2facing: 1;
		ground.cornerpush.veloff: 0;
		air.fall: 1;
		fall.recover: 0;
		hitonce: 1;
		kill: 1;
		guard.kill: 1;
		fall.kill: 1;
	}
}

# Apply shake if blocked [MK3].
ignoreHitPause persistent(0) if moveGuarded {
	envShake{time: 16; freq: 65; ampl: 3}
}

# End of state.
if animTime = 0 {
	selfState{value: const(StateStand); ctrl: 1}
}

# ---------------------------------------------
# Low Kick
[StateDef const(StateLowKick); type: S; moveType: A; physics: S;
velSet: 0,0; ctrl: 0; anim: const(AnimLowKick);]

# Play them attacking. Impactful!
if time = 0 {
	call ComSound(1,10 + 2*(random%2));
	call CharVoice(2,0 + random%2);
}

# If P2 has a custom reaction, use it.
# In MK, kicks have different anims.
# TODO: Adapt to constants style.
ignoreHitPause persistent(0) if enemy,selfAnimExist(6011) && moveHit {
	targetState{value: 5003}
}

# Hitbox for the move.
if !moveContact {
	hitDef {
		attr: S,NA;
		hitflag: MAF;
		guardflag: MA;
		animtype: medium;
		air.animtype: back;
		pausetime: 14,0;
		damage: 127,24;
		sparkno: -1;
		guard.sparkno: -1;
		hitsound: f2,30 + random%2;
		guardsound: f3,1;
		ground.type: low;
		ground.slidetime: 18;
		guard.slidetime: 12;
		ground.hittime: 12;
		guard.hittime: 12;
		air.hittime: 20;
		ground.velocity: -4.5,0;
		guard.velocity: -2;
		air.velocity: -3.5,-6;
		p2facing: 1;
		ground.cornerpush.veloff: 0;
		air.fall: 1;
		fall.recover: 0;
		hitonce: 1;
		kill: 1;
		guard.kill: 1;
		fall.kill: 1;
	}
}

# Apply shake if blocked [MK3].
ignoreHitPause persistent(0) if moveGuarded {
	envShake{time: 16; freq: 65; ampl: 3}
}

# End of state.
if animTime = 0 {
	selfState{value: const(StateStand); ctrl: 1}
}

# ---------------------------------------------
# Roundhouse Kick
[StateDef const(StateRoundhouseKick); type: S; moveType: A; physics: S;
velSet: 0,0; ctrl: 0; anim: const(AnimRoundhouseKick);]

# Play them attacking. Impactful!
if time = 0 {
	call ComSound(1,20);
	call CharVoice(2,0 + random%2);
}

# Hitbox for the move.
if const(OpenMK.Char.RoundhouseKick) = [1,2] { # MK2 & MK3 Roundhouse Kick.
	if !moveContact {
		hitDef {
			attr: S,NA;
			hitflag: MAF;
			guardflag: MA;
			animtype: diagup;
			air.animtype: diagup;
			pausetime: 9,0;
			damage: 175,24;
			sparkno: -1;
			guard.sparkno: -1;
			hitsound: f2,20 + random%2;
			guardsound: f3,1;
			ground.type: high;
			ground.slidetime: 12;
			guard.slidetime: 12;
			ground.hittime: 12;
			guard.hittime: 12;
			air.hittime: 20;
			ground.velocity: -6,-8;
			guard.velocity: -2;
			air.velocity: -6,-8;
			p2facing: 1;
			ground.cornerpush.veloff: 0;
			fall: 1;
			fall.recover: 0;
			hitonce: 1;
			kill: 1;
			guard.kill: 1;
			fall.kill: 1;
		}
	}
} else if const(OpenMK.Char.RoundhouseKick) = 0 { # MK1 Roundhouse Kick.
	if !moveContact {
		hitDef {
			attr: S,NA;
			hitflag: MAF;
			guardflag: MA;
			animtype: hard;
			air.animtype: back;
			pausetime: 9,0;
			damage: 175,24;
			sparkno: -1;
			guard.sparkno: -1;
			hitsound: f2,20 + random%2;
			guardsound: f3,1;
			ground.type: high;
			ground.slidetime: 12;
			guard.slidetime: 12;
			ground.hittime: 12;
			guard.hittime: 12;
			air.hittime: 20;
			ground.velocity: -6,0;
			guard.velocity: -2;
			air.velocity: -6,-8;
			p2facing: 1;
			ground.cornerpush.veloff: 0;
			air.fall: 1;
			fall.recover: 0;
			hitonce: 1;
			kill: 1;
			guard.kill: 1;
			fall.kill: 1;
		}
	}

	# If P2 has a custom reaction, use it.
	# TODO: Adapt to constants style.
	ignoreHitPause persistent(0) if enemy,selfAnimExist(6000) && moveHit {
		targetState{value: 5060}
	}
}

# Apply shake upon contact.
if const(OpenMK.Char.RoundhouseKick) = 0 || const(OpenMK.Char.RoundhouseKick) = 2 { # MK1 and MK3 behavior.
	ignoreHitPause persistent(0) if moveContact {
	envShake{time: 16; freq: 65; ampl: 3}
	}
} else if const(OpenMK.Char.RoundhouseKick) = 1 { # MKII behavior.
	ignoreHitPause persistent(0) if moveGuarded {
	envShake{time: 16; freq: 65; ampl: 3}
	}
}

# End of state.
if animTime = 0 {
	selfState{value: const(StateStand); ctrl: 1}
}

# ---------------------------------------------
# Sweep
[StateDef const(StateSweep); type: C; moveType: A; physics: C;
velSet: 0,0; ctrl: 0; anim: const(AnimSweep);]

# Play a wind sound. Impactful!
if time = 9 {
	call ComSound(1,10 + 2*(random%2));
	call CharVoice(2,0 + random%2);
}

# If P2 has a custom reaction, use it.
# TODO: Adapt to constants style.
ignoreHitPause persistent(0) if enemy,selfAnimExist(6020) && moveHit {
	targetState{value: 5004}
}

# Hitbox for the move.
if const(OpenMK.Char.SweepFix) = 0 { # Has infinite.
	if !moveContact {
		hitDef {
			attr: C,NA;
			hitflag: MAFD;
			guardflag: L;
			animtype: back;
			air.animtype: back;	
			pausetime: 5,0;
			damage: 120,18;
			sparkno: -1;
			guard.sparkno: -1;
			hitsound: f2,30 + random%2;
			guardsound: f3,0;
			ground.type: trip;
			ground.slidetime: 8;
			guard.slidetime: 8;
			ground.hittime: 8;
			guard.hittime: 8;
			air.hittime: 20;
			ground.velocity: 0,-2;
			guard.velocity: -4;
			air.velocity: 0,0;
			p2facing: 1;
			ground.cornerpush.veloff: 0;
			forcestand: 1;
			fall: 1;
			fall.recover: 0;
			down.velocity: 0,-2;
			kill: 1;
			guard.kill: 1;
			fall.kill: 1;
		}
	}
} else { # Game is finally playable! LOL
		if !moveContact {
		hitdef {
			attr: C,NA;
			hitflag: MAF;
			guardflag: L;
			animtype: back;
			air.animtype: back;
			pausetime: 10,0;
			damage: 120,18;
			sparkno: -1;
			guard.sparkno: -1;
			hitsound: f2,30 + random%2;
			guardsound: f3,0;
			ground.type: trip;
			ground.slidetime: 8;
			guard.slidetime: 8;
			ground.hittime: 8;
			guard.hittime: 8;
			air.hittime: 20;
			ground.velocity: -2,-2;
			guard.velocity: -4;
			air.velocity: -2,-2;
			p2facing: 1;
			ground.cornerpush.veloff: 0;
			forcestand: 1;
			fall: 1;
			fall.recover: 0;
			kill: 1;
			guard.kill: 1;
			fall.kill: 1;
		}
	}
}

# End of state.
if animTime = 0 {
	selfState{value: const(StateStand); ctrl: 1}
}

# ---------------------------------------------
# Crouch High Kick
[StateDef const(StateCrouchHighKick); type: C; moveType: A; physics: C;
velset: 0,0; ctrl: 0; anim: const(AnimCrouchHighKick);]

# Play them attacking. Impactful!
if time = 0 {
	call ComSound(1,10 + 2*(random%2));
	call CharVoice(2,0 + random%2);
}

# Hitbox for the move.
if !moveContact {
	hitDef {
		attr: C,NA;
		hitflag: MAF;
		guardflag: M;
		animtype: light;
		air.animtype: back;
		pausetime: 15,0;
		damage: 72,18;
		sparkno: -1;
		guard.sparkno: -1;
		hitsound: f2,0 + random%2;
		guardsound: f3,1;
		ground.type: low;
		ground.slidetime: 12;
		guard.slidetime: 12;
		ground.hittime: 12;
		guard.hittime: 12;
		air.hittime: 20;
		ground.velocity: -4.5,0;
		guard.velocity: -5;
		air.velocity: -3.5,-6;
		p2facing: 1;
		ground.cornerpush.veloff: 0;
		air.fall: 1;
		fall.recover: 0;
		hitonce: 1;
		kill: 1;
		guard.kill: 1;
		fall.kill: 1;
	}
}

# End of state.
if animTime = 0 {
	selfState{value: const(StateCrouching); ctrl: 1}
}

# ---------------------------------------------
# Uppercut
[StateDef const(StateUppercut); type: C; moveType: A; physics: N;
velSet: 0,0; ctrl: 0; anim: const(AnimUppercut);]

# Play them attacking. Impactful!
if time = 0 {
	call ComSound(1,10 + 2*(random%2));
}

# I'm no longer crouching.
if animElem = 3 {
	stateTypeSet{stateType: S}
}

# Hitbox for the move.
if !moveContact {
	hitDef {
		attr: S,NA;
		hitflag: HAF;
		guardflag: MA;
		animtype: up;
		air.animtype: up;
		damage: 217,54;
		sparkno: -1;
		guard.sparkno: -1;
		hitsound: f2,20 + random%2;
		guardsound: f3,1;
		ground.type: high;
		ground.slidetime: 16;
		guard.slidetime: 16;
		ground.hittime: 16;
		guard.hittime: 16;
		air.hittime: 20;
		yaccel: 0.375;
		ground.velocity: -2,-12;
		guard.velocity: -4;
		air.velocity: -2,-12;
		p2facing: 1;
		ground.cornerpush.veloff: 0;
		fall: 1;
		fall.recover: 0;
		kill: 1;
		guard.kill: 1;
		fall.kill: 1;
	}
}

# Freeze upon hit.
if const(OpenMK.Char.UppercutFreeze) = 0 {
	if moveHit = [1,47] || moveGuarded = [1,15] {
		assertSpecial{flag: animfreeze}
	}
} else if const(OpenMK.Char.UppercutFreeze) = [1,2] {
	if moveHit = [1,57] || moveGuarded = [1,32] {
		assertSpecial{flag: animfreeze}
	}
}

# Apply shake upon contact.
persistent(0) ignoreHitPause if moveContact {
	envShake{time: 16; freq: 65; ampl: 3}
}

# End of state.
if animTime = 0 {
	selfState{value: const(StateStand); ctrl: 1}
}

# ---------------------------------------------
# Crouch Low Punch
[StateDef const(StateCrouchLowPunch); type: C; moveType: A; physics: C;
velSet: 0,0; ctrl: 0; anim: const(AnimCrouchLowPunch);]

# Change to MK1 behaviour.
if const(OpenMK.Char.CrouchAttacks) = 1 || !selfAnimExist(const(AnimCrouchLowPunch)) {
	selfState{value: const(StateUppercut)}
}

# Play them attacking. Impactful!
if time = 0 {
	call ComSound(1,0 + 2*(random%2));
	call CharVoice(2,0 + random%2);
}

# Hitbox for the move.
if !moveContact {
	hitDef {
		attr: C,NA;
		hitflag: MAF;
		guardflag: M;
		animtype: light;
		air.animtype: back;
		damage: 36,12;
		sparkno: -1;
		guard.sparkno: -1;
		hitsound: f2,0 + random%2;
		guardsound: f3,0;
		ground.type: low;
		ground.slidetime: 12;
		guard.slidetime: 12;
		ground.hittime: 12;
		guard.hittime: 12;
		air.hittime: 20;
		ground.velocity: -4,0;
		guard.velocity: -2;
		air.velocity: -2,-6;
		p2facing: 1;
		ground.cornerpush.veloff: 0;
		air.fall: 1;
		fall.recover: 0;
		hitonce: 1;
		kill: 1;
		guard.kill: 1;
		fall.kill: 1;
	}
}

# Skip pause time. MK does it like this, IDK why.
persistent(0) if moveContact {
	changeAnim{value: anim; elem: 5}
}

# End of state.
if animTime = 0 {
	selfState{value: const(StateCrouching); ctrl: 1}
}

# ---------------------------------------------
# Crouch Low Kick
[StateDef const(StateCrouchLowKick); type: C; moveType: A; physics: C;
velSet: 0,0; ctrl: 0; anim: const(AnimCrouchLowKick);]

# Change to MK1 behaviour.
if const(OpenMK.Char.CrouchAttacks) = 1 || !selfAnimExist(const(AnimCrouchLowKick)) {
	selfState{value: const(StateCrouchHighKick)}
}

# Play them attacking. Impactful!
if time = 0 {
	call ComSound(1,0 + 2*(random%2));
	call CharVoice(2,0 + random%2);
}

# Hitbox for the move.
if !moveContact {
	hitDef {
		attr: C,NA;
		hitflag: MAF;
		guardflag: M;
		animtype: light;
		air.animtype: back;
		pausetime: 5,0;
		damage: 48,12;
		sparkno: -1;
		guard.sparkno: -1;
		hitsound: f2,0 + random%2;
		guardsound: f3,0;
		ground.type: low;
		ground.slidetime: 12;
		guard.slidetime: 12;
		ground.hittime: 12;
		guard.hittime: 12;
		air.hittime: 20;
		ground.velocity: -3,0;
		guard.velocity: -3;
		air.velocity: -3.5,-6;
		p2facing: 1;
		ground.cornerpush.veloff: 0;
		air.fall: 1;
		fall.recover: 0;
		hitonce: 1;
		kill: 1;
		guard.kill: 1;
		fall.kill: 1;
	}
}

# End of state.
if animTime = 0 {
	selfState{value: const(StateCrouching); ctrl: 1}
}

# ---------------------------------------------
# Air Kick
[StateDef const(StateAirKick); type: A; moveType: A; physics: A;
ctrl: 0; anim: const(AnimAirKick);]

# Play them attacking. Impactful!
if time = 0 {
	call ComSound(1,10 + 2*(random%2));
	call CharVoice(2,0 + random%2);
}

# Hitbox for the move.
if !moveContact {
	hitDef {
		attr: A,NA;
		hitflag: MAF;
		guardflag: MA;
		animtype: light;
		air.animtype: back;
		damage: 114,36;
		sparkno: -1;
		guard.sparkno: -1;
		hitsound: f2,10 + 2*(random%2);
		guardsound: f3,1;
		ground.type: high;
		ground.slidetime: 12;
		guard.slidetime: 12;
		ground.hittime: 12;
		guard.hittime: 12;
		air.hittime: 20;
		ground.velocity: -1,0;
		guard.velocity: -2;
		air.velocity: -3.5,-6;
		air.fall: 1;
		fall.recover: 0;
		kill: 1;
		guard.kill: 1;
		fall.kill: 1;
	}
}

# End of state.
persistent(0) if moveContact {
	selfState{value: const(StateConnectedAirAttack)}
}

# ---------------------------------------------
# Air Punch
[StateDef const(StateAirPunch); type: A; moveType: A; physics: A;
ctrl: 0; anim: const(AnimAirPunch);]

# Behind you!
if time = 0 && p2Dist x < 0 {
	turn{}
}

# Play them attacking. Impactful!
if time = 0 {
	call ComSound(1,10 + 2*(random%2));
	call CharVoice(2,0 + random%2);
}

# Hitbox for the move.
if !moveContact {
	hitDef {
		attr: A,NA;
		hitflag: MAF;
		guardflag: MA;
		animtype: light;
		air.animtype: back;
		damage: 96,30;
		sparkno: -1;
		guard.sparkno: -1;
		hitsound: f2,10 + 2*(random%2);
		guardsound: f3,1;
		ground.type: high;
		ground.slidetime: 16;
		ground.hittime: 16;
		air.hittime: 20;
		ground.velocity: -1,0;
		air.velocity: -3.5,-4;
		p2facing: 1;
		air.fall: 1;
		fall.recover: 0;
		kill: 1;
		guard.kill: 1;
		fall.kill: 1;
	}
}

# End of state.
persistent(0) if moveContact {
	selfState{value: const(StateConnectedAirAttack)}
}

# ---------------------------------------------
# Leap Kick
[StateDef const(StateLeapKick); type: A; movetype: A; physics: A;
ctrl: 0; anim: const(AnimLeapKick);]

# Behind you!
if time = 0 && p2Dist x < 0 {
	turn{}
}

# Play them attacking. Impactful!
if time = 0 {
	call ComSound(1,10 + 2*(random%2));
	call CharVoice(2,0 + random%2);
}

# Hitbox for the move.
if !moveContact {
	hitDef {
		attr: A,NA;
		hitflag: MAF;
		guardflag: MA;
		animtype: back;
		air.animtype: back;
		damage: 157,42;
		sparkno: -1;
		guard.sparkno: -1;
		hitsound: f2,10 + 2*(random%2);
		guardsound: f3,1;
		ground.type: high;
		ground.slidetime: 11;
		guard.slidetime: 11;
		ground.hittime: 11;
		guard.hittime: 11;
		air.hittime: 20;
		ground.velocity: -3,-8;
		guard.velocity: -2;
		air.velocity: -3.5,-6;
		p2facing: 1-2*(p2dist x < 0);
		fall: 1;
		fall.recover: 0;
		kill: 1;
		guard.kill: 1;
		fall.kill: 1;
	}
}

# End of state.
persistent(0) if moveContact {
	selfState{value: const(StateConnectedAirAttack)}
}

# ---------------------------------------------
# Connected Aerial Hit
[StateDef const(StateConnectedAirAttack); type: A; moveType: A; physics: A;
ctrl: 0;]

# Shake!
persistent(0) if prevStateNo != const(AnimLeapKick) {
	envShake{time: 16; freq: 65; ampl: 3}

} else { # If move was blocked.
	ignoreHitPause if enemy,stateNo = [const(StateStandGuardHit_shaking),const(StateAirGuardHit_knockedAway)] {
		targetVelSet{x: -3}
	}
}

# Hit animation.
if time = 0 {
	changeAnim{value: anim + 1}
}

# Don't fall yet!
if prevStateNo = [const(StateAirKick),const(AnimLeapKick)] && time < 7 {
	velSet{x: 0; y: 0}
}

# ---------------------------------------------
# Initialize (at the start of the round)
[StateDef const(StateInitialize); type: S;]

# Set run map to 380.
map(runReload) := 380;

# Rest of original code.
if roundsExisted = 0 {
	varRangeSet{value: 0}
	varRangeSet{fvalue: 0}
}
remapPal{source: 1, 1; dest: 1, ifElse(isHelper, palNo, drawPalNo)}
if roundNo = 1 {
	changeState{value: 190}
}
changeState{value: 0}