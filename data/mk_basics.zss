# This file holds every basic move that's not in the
# default common1 file. Coded by Leanie.

# ---------------------------------------------
# The Function Zone
# ---------------------------------------------

# Used to call a character voicebyte.
[Function CharVoice(bank, index)]
playsnd{value: s$bank, $index; channel: 0}

# Used to call a character sound effect.
[Function CharSFX(bank, index)]
playsnd{value: s$bank, $index; channel: 1}

# Used to call a common.snd sound.
[Function ComSound(bank, index)]
playsnd{value: f$bank, $index; channel: 2}

# To end a state.
[Function StateEnd(state)]
changestate{value: $state; ctrl: 1}

# To apply a camera shake.
[Function Shake(time, freq, ampl)]
envshake{
	time: $time;
	freq: $freq;
	ampl: $ampl
}

[Function HiToLoAndLoToHi()]
if command = "holddown" && statetype = S {
	statetypeset{statetype: C; physics: C}
} else if statetype = C {
	statetypeset{statetype: S; physics: S}
}

[Function StopGuarding()]
if command != "block" {
	changestate{value: 140}
}

# High punch hitbox.
[Function PunchHitboxH()]
hitdef{
	attr: S,NA;
	hitflag: MAF;
	guardflag: MA;
	animtype: light;
	air.animtype: back;
	damage: 66,18;
	sparkno: -1;
	guard.sparkno: -1;
	hitsound: f2,0 + random%2;
	guardsound: f3,0;
	ground.type: high;
	ground.slidetime: 12;
	guard.slidetime: 12;
	ground.hittime: 12;
	guard.hittime: 12;
	air.hittime: 20;
	yaccel: 0.4375;
	ground.velocity: 0,0;
	guard.velocity: -2;
	air.velocity: -3,-6;
	p2facing: 1;
	ground.cornerpush.veloff: 0;
	air.fall: 1;
	fall.recover: 0;
	kill: 1;
	guard.kill: 1;
	fall.kill: 1;
	guard.dist: 80;
}

# Low punch hitbox.
[Function PunchHitboxL()]
hitdef{
	attr: S,NA;
	hitflag: MAF;
	guardflag: MA;
	animtype: light;
	air.animtype: back;
	damage: 48,12;
	sparkno: -1;
	guard.sparkno: -1;
	hitsound: f2,30 + random%2;
	guardsound: f3,0;
	ground.type: low;
	ground.slidetime: 12;
	guard.slidetime: 12;
	ground.hittime: 12;
	guard.hittime: 12;
	air.hittime: 20;
	yaccel: 0.4375;
	ground.velocity: 0,0;
	guard.velocity: -2;
	air.velocity: -3,-6;
	p2facing: 1;
	ground.cornerpush.veloff: 0;
	air.fall: 1;
	fall.recover: 0;
	kill: 1;
	guard.kill: 1;
	fall.kill: 1;
	guard.dist: 80;
}

# This calls buffer commands for all punches.
[Function PunchBuffer()]

# Reset command buffer variable.
if time < 2 {
	mapSet{map:"commandBuffer"; value: 0}
}

# Buffer the next punch.
if command = "x" { # High Punch
	if time = [2,13] {
		mapSet{map:"commandBuffer"; value: 1}
	}
} else if command = "a" { # Low Punch
	if time = [2,13] {
		mapSet{map:"commandBuffer"; value: 2}
	}
} else if command = "b" || command = "run" || command = "y" || command = "block" { # Jab Cancel
	if time = [3,10] {
		mapSet{map:"commandBuffer"; value: 3}
	}
}

# Jab cancel animation.
if map(commandBuffer) = 3 && animelemtime(4) = 2 {
	changeAnim{value: anim; elem: 5}
}

# ---------------------------------------------
# BASIC MOVES
# ---------------------------------------------

# OpenMK common content
[Statedef -2]

# This constant enables common things for MK.
if const(OpenMK.Char.Enabled) = 1 {
	# Disable block as default.
	assertspecial{flag: nostandguard; flag2: nocrouchguard; flag3: noairguard}
	# Disable K.O. content.
	assertspecial{flag: nokovelocity; flag2: nokosnd}

	# ---------------------------------------------
	# Run bar logic
	
	# Map "leaveRunState" is defined when you leave the run state.
	# If player has exited run state without them
	# actually wanting to, variable will be forced to 1.
	if movetype = h || !map(leaveRunState) && stateno != 107 {
		mapSet{map: "leaveRunState"; value: 1}
	}

	# This will make it so if you stop running, the RunReload will
	# deplete from 380 to 0 so the bar refills.
	if map(leaveRunState) {
		mapAdd{map: "runReload"; value: -20}
	}
	
	# Limit it so it doesn't go below 0.
	if map(runReload) <= 0 {
		mapSet{map: "runReload"; value: 0}
	}

	# When reload time hits 0, refill the bar again 'til it's max.
	if numexplod(10000) = 0 && var(1) = 1 && power < powermax {
		if map(runReload) = 0 {
			poweradd{value: 20}
		}
	}
}

# ---------------------------------------------
# Stand
[Statedef 0;
type: S;
physics: S;
sprpriority: 0;]

# Reset any angledraw's.
angledraw{value: 0}

# Change anim.
if cond(anim = 5, animtime = 0, anim != 0) {
	changeanim{value: 0}
}

# Stop falling down.
if time = 0 {
	velset{y: 0}
	posset{y: 0}
}

# Friction stuff.
if time = 4 || abs(vel x) < ifelse(majorversion = 1,
	const(movement.stand.friction.threshold), 2) {
	velset{x: 0}
}

# If dead.
if !alive {
	changeState{value: 5050; ctrl: 0}
}

# ---------------------------------------------
# Jump Start
[Statedef 40;
type: S;
physics: S;
anim: 40;
ctrl: 0;
sprpriority: 1;
facep2: 1;]

# Reset any angledraw's.
angledraw{value: 0}

# Set direction for movement.
if time = 0 {
	call CharVoice(1,1);
}

# Change speed depending of above variable.
if command = "holdfwd" {
	let x = const(velocity.jump.fwd.x); # Forward Roll
} else if command = "holdback" {
	let x = const(velocity.jump.back.x); # Back Roll
} else {
	let x = const(velocity.jump.neu.x); # Neutral Jump
}

# Apply velocity.
velSet{x: $x; y: const(velocity.jump.y)}

# End of state.
changeState{value: 50; ctrl: 1}

# ---------------------------------------------
# Jump Land
[Statedef 52;
type: S;
physics: S;
ctrl: 0;
anim: 47;]

# Reset any angledraw's.
angledraw{value: 0}

# Stop moving.
if time = 0 {
	velset{x: 0; y: 0}
	posset{y: 0}
} else if time > 3 { # Apply control
	ctrlset{value: 1}
}

# Turn around to see enemy player.
if p2dist x < 0 && time = 0 {
	turn{}
}

# End of state.
if animtime = 0 {
	call StateEnd(0);
}

# ---------------------------------------------
# Run forward
[Statedef 100;
type: S;
physics: S;
anim: 100;
sprpriority: 1;]

# Limit some movements.
# In MK3 you can't crouch during walk and run.
assertspecial{
	flag: nowalk;
	flag2: nocrouch;
	flag3: noautoturn
}
	
# Apply X velocity from constants.
velset{x: const(velocity.run.fwd.x)}

# Deplete run bar.
poweradd{value: -20}

# This resets run stuffs.
# Also, makes character yell.
if time = 0 {
	mapSet{map: "leaveRunState"; value: 0}
	mapset{map: "RunReload"; value: 1000}
	call CharVoice(1,0);
}

# Footstep sounds.
if time%15 = 0 {
	call ComSound(11,0 + random%4);
}

# Play run animation.
if anim != 100 && anim != 5 || anim = 5 && animtime = 0 {
changeanim{value: 100}
}

# This resets timer just in case you've exited the run state.
# Done so run bar reloads correctly.
if power <= 0 || command != "holdfwd" || (command = "holdup" || command = "holdfwd" || command = "holdback") {
	mapSet{map: "leaveRunState"; value: 1}
}

# If player has no more power, just stop.
if power <= 0 {
	if command = "holdfwd" {
		changestate{value: 20; ctrl: 1}
	} else {
		changestate{value: 0; ctrl: 1}
	}
} else { # Still, stop even with power.
	if command != "holdfwd" {
		changestate{value: 0; ctrl: 1}
	}
}

# ---------------------------------------------
# Stand Block [Start]
[Statedef 120;
type: U;
physics: U;
ctrl: 0;]

# Change animation.
# Air block is disabled for MK characters,
# as they never blocked mid-air.
if time = 0 {
	changeanim{value: 120 + (statetype = C)}
	if statetype = S { # If standing.
		statetypeset{physics: S}
	} else if statetype = C { # If crouching.
		statetypeset{physics: C}
	}
}

# Make them go from low to high.
call HiToLoAndLoToHi();

# End of state.
if animtime = 0 {
	changestate{value: 130 + (statetype = C)}
}

# Stop guarding.
call StopGuarding();

# ---------------------------------------------
# Stand Block [Guard]
[Statedef 130;
type: S;
physics: S;
ctrl: 0;]

# Change animation.
if anim != 130 {
	changeanim{value: 130}
}

# End of state.
if command = "holddown" {
	changestate{value: 131}
}

# Stop guarding.
call StopGuarding();

# ---------------------------------------------
# Crouch Block [Guard]
[Statedef 131;
type: C;
physics: C;
ctrl: 0;]

# Change animation.
if anim != 131 {
	changeanim{value: 131}
}

# End of state.
if command != "holddown" {
	changestate{value: 130}
}

# Stop guarding.
call StopGuarding();

# ---------------------------------------------
# Block [End]
[Statedef 140;
type: U;
physics: U;
ctrl: 0;]

# Change animation.
if time = 0 {
	changeanim{value: 140 + (stateType = C)}
	if statetype = S {
		statetypeset{physics: S}
	} else if statetype = C {
		statetypeset{physics: C}
	}
}

# Make them go from low to high.
call HiToLoAndLoToHi();

if statetype = S {
	if animtime = 0 {
		call StateEnd(0);
	}
} else if statetype = C {
	if animtime = 0 {
		call StateEnd(11);
	}
}

# ---------------------------------------------
# High Punch I
[Statedef 200;
type: S;
movetype: A;
physics: S;
velset: 0,0;
ctrl: 0;
anim: 200 + 2*(prevstateno = 201);]

# Play a wind sound. Impactful!
if time = 3 {
	call ComSound(1,0 + random%2);
	call CharVoice(2,0 + random%2);
}

# Hitbox for the move.
if !movecontact {
	call PunchHitboxH();
}

# This calls command buffering system.
call PunchBuffer();

# Move on to next punch state.
if map(commandBuffer) = 1 || map(commandBuffer) = 2 {
	if time = 10 {
		changestate{value: 201 + 20*(map(commandBuffer) = 2)}
	}
}

# End of state.
if animtime = 0 {
	call StateEnd(0);
}

# ---------------------------------------------
# High Punch II
[Statedef 201;
type: S;
movetype: A;
physics: S;
velset: 0,0;
ctrl: 0;
anim: 201;]

# Play a wind sound. Impactful!
if time = 3 {
	call ComSound(1,0 + random%2);
	call CharVoice(2,0 + random%2);
}

# Hitbox for the move.
if !movecontact {
	call PunchHitboxH();
}

# This calls command buffering system.
call PunchBuffer();

# Move on to next punch state.
if map(commandBuffer) = 1 || map(commandBuffer) = 2 {
	if time = 10 {
		changestate{value: 200 + 20*(map(commandBuffer) = 2)}
	}
}

# End of state.
if animtime = 0 {
	call StateEnd(0);
}

# ---------------------------------------------
# Low Punch I
[Statedef 220;
type: S;
movetype: A;
physics: S;
velset: 0,0;
ctrl: 0;
anim: 220 + 2*(prevstateno = 221);]

# Play a wind sound. Impactful!
if time = 3 {
	call ComSound(1,0 + random%2);
	call CharVoice(2,0 + random%2);
}

# Hitbox for the move.
if !movecontact {
	call PunchHitboxL();
}

# This calls command buffering system.
call PunchBuffer();

# Move on to next punch state.
if map(commandBuffer) = 1 || map(commandBuffer) = 2 {
	if time = 10 {
		changestate{value: 221 - 20*(map(commandBuffer) = 1)}
	}
}

# End of state.
if animtime = 0 {
	call StateEnd(0);
}

# ---------------------------------------------
# Low Punch II
[Statedef 221;
type: S;
movetype: A;
physics: S;
velset: 0,0;
ctrl: 0;
anim: 221;]

# Play a wind sound. Impactful!
if time = 3 {
	call ComSound(1,0 + random%2);
	call CharVoice(2,0 + random%2);
}

# Hitbox for the move.
if !movecontact {
	call PunchHitboxL();
}

# This calls command buffering system.
call PunchBuffer();

# Move on to next punch state.
if map(commandBuffer) = 1 || map(commandBuffer) = 2 {
	if time = 10 {
		changestate{value: 220 - 20*(map(commandBuffer) = 1)}
	}
}

# End of state.
if animtime = 0 {
	call StateEnd(0);
}

# ---------------------------------------------
# High Kick
[Statedef 210;
type: S;
movetype: A;
physics: S;
velset: 0,0;
ctrl: 0;
anim: 210;]

# Play a wind sound. Impactful!
if time = 3 {
	call ComSound(1,10 + 2*(random%2));
	call CharVoice(2,0 + random%2);
}

# If P2 has a custom reaction, use it.
# In MK, kicks have different anims.
ignorehitpause persistent(0) if enemy,selfanimexist(6010) && movehit {
	targetstate{value: 5002}
}

# Hitbox for the move.
if !movecontact {
	hitdef {	
		attr: S,NA;
		hitflag: MAF;
		guardflag: MA;
		animtype: medium;
		air.animtype: back;
		pausetime: 12,0;
		damage: 144,30;
		sparkno: -1;
		guard.sparkno: -1;
		hitsound: f2,20 + random%2;
		guardsound: f3,1;
		ground.type: high;
		ground.slidetime: 18;
		guard.slidetime: 12;
		ground.hittime: 12;
		guard.hittime: 12;
		air.hittime: 20;
		ground.velocity: -4.5,0;
		guard.velocity: -2;
		air.velocity: -3.5,-6;
		p2facing: 1;
		ground.cornerpush.veloff: 0;
		air.fall: 1;
		fall.recover: 0;
		hitonce: 1;
		kill: 1;
		guard.kill: 1;
		fall.kill: 1;
	}
}

# Apply shake if blocked [MK3].
ignorehitpause persistent(0) if moveguarded {
	call Shake(16,65,4);
}

# End of state.
if animtime = 0 {
	call StateEnd(0);
}

# ---------------------------------------------
# Low Kick
[Statedef 230;
type: S;
movetype: A;
physics: S;
velset: 0,0;
ctrl: 0;
anim: 230;]

# Play a wind sound. Impactful!
if time = 3 {
	call ComSound(1,10 + 2*(random%2));
	call CharVoice(2,0 + random%2);
}

# If P2 has a custom reaction, use it.
# In MK, kicks have different anims.
ignorehitpause persistent(0) if enemy,selfanimexist(6011) && movehit {
	targetstate{value: 5003}
}

# Hitbox for the move.
if !movecontact {
	hitdef {	
		attr: S,NA;
		hitflag: MAF;
		guardflag: MA;
		animtype: medium;
		air.animtype: back;
		pausetime: 14,0;
		damage: 127,24;
		sparkno: -1;
		guard.sparkno: -1;
		hitsound: f2,30 + random%2;
		guardsound: f3,1;
		ground.type: low;
		ground.slidetime: 18;
		guard.slidetime: 12;
		ground.hittime: 12;
		guard.hittime: 12;
		air.hittime: 20;
		ground.velocity: -4.5,0;
		guard.velocity: -2;
		air.velocity: -3.5,-6;
		p2facing: 1;
		ground.cornerpush.veloff: 0;
		air.fall: 1;
		fall.recover: 0;
		hitonce: 1;
		kill: 1;
		guard.kill: 1;
		fall.kill: 1;
	}
}

# Apply shake if blocked [MK3].
ignorehitpause persistent(0) if moveguarded {
	call Shake(16,65,4);
}

# End of state.
if animtime = 0 {
	call StateEnd(0);
}

# ---------------------------------------------
# Roundhouse Kick
[Statedef 240;
type: S;
movetype: A;
physics: S;
velset: 0,0;
ctrl: 0;
anim: 240;]

# Play a wind sound. Impactful!
if time = 3 {
	call ComSound(1,20);
	call CharVoice(2,0 + random%2);
}

# Hitbox for the move.
if const(OpenMK.Char.RoundhouseKick) = 0 || const(OpenMK.Char.RoundhouseKick) = [2,3] { # MK2 & MK3 Roundhouse Kick.
	if !movecontact {
		hitdef {
			attr: S,NA;
			hitflag: MAF;
			guardflag: MA;
			animtype: diagup;
			air.animtype: diagup;
			pausetime: 9,0;
			damage: 175,24;
			sparkno: -1;
			guard.sparkno: -1;
			hitsound: f2,20 + random%2;
			guardsound: f3,1;
			ground.type: high;
			ground.slidetime: 12;
			guard.slidetime: 12;
			ground.hittime: 12;
			guard.hittime: 12;
			air.hittime: 20;
			ground.velocity: -6,-8;
			guard.velocity: -2;
			air.velocity: -6,-8;
			p2facing: 1;
			ground.cornerpush.veloff: 0;
			fall: 1;
			fall.recover: 0;
			hitonce: 1;
			kill: 1;
			guard.kill: 1;
			fall.kill: 1;
		}
	}
} else if const(OpenMK.Char.RoundhouseKick) = 1 { # MK1 Roundhouse Kick.
	if !movecontact {
		hitdef {
			attr: S,NA;
			hitflag: MAF;
			guardflag: MA;
			animtype: hard;
			air.animtype: back;
			pausetime: 9,0;
			damage: 175,24;
			sparkno: -1;
			guard.sparkno: -1;
			hitsound: f2,20 + random%2;
			guardsound: f3,1;
			ground.type: high;
			ground.slidetime: 12;
			guard.slidetime: 12;
			ground.hittime: 12;
			guard.hittime: 12;
			air.hittime: 20;
			ground.velocity: -6,0;
			guard.velocity: -2;
			air.velocity: -6,-8;
			p2facing: 1;
			ground.cornerpush.veloff: 0;
			air.fall: 1;
			fall.recover: 0;
			hitonce: 1;
			kill: 1;
			guard.kill: 1;
			fall.kill: 1;
		}
	}
	# If P2 has a custom reaction, use it.
	ignorehitpause persistent(0) if enemy,selfanimexist(6000) && movehit {
		targetstate{value: 5060}
	}
}

# Apply shake upon contact.
if const(OpenMK.Char.RoundhouseKick) = [0,1] || const(OpenMK.Char.RoundhouseKick) = 3 { # MK1 and MK3 behavior.
	ignorehitpause persistent(0) if movecontact {
	call Shake(16,65,4);
	}
} else if const(OpenMK.Char.RoundhouseKick) = 2 { # MKII behavior.
	ignorehitpause persistent(0) if moveguarded {
	call Shake(16,65,4);
	}
}

# End of state.
if animtime = 0 {
	call StateEnd(0);
}

# ---------------------------------------------
# Sweep
[Statedef 250;
type: C;
movetype: A;
physics: C;
velset: 0,0;
ctrl: 0;
anim: 250;]

# Play a wind sound. Impactful!
if time = 9 {
	call ComSound(1,10 + 2*(random%2));
	call CharVoice(2,0 + random%2);
}

# If P2 has a custom reaction, use it.
ignorehitpause persistent(0) if enemy,selfanimexist(6020) && movehit {
	targetstate{value: 5004}
}

# Hitbox for the move.
if const(OpenMK.Char.SweepFix) = 0 { # Has infinite.
	if !movecontact || p2statetype = l {
		hitdef {
			attr: C,NA;
			hitflag: MAFD;
			guardflag: L;
			animtype: back;
			air.animtype: back;	
			pausetime: 5,0;
			damage: 120,18;
			sparkno: -1;
			guard.sparkno: -1;
			hitsound: f2,30 + random%2;
			guardsound: f3,0;
			ground.type: trip;
			ground.slidetime: 8;
			guard.slidetime: 8;
			ground.hittime: 8;
			guard.hittime: 8;
			air.hittime: 20;
			ground.velocity: 0,-2;
			guard.velocity: -4;
			air.velocity: 0,0;
			p2facing: 1;
			ground.cornerpush.veloff: 0;
			forcestand: 1;
			fall: 1;
			fall.recover: 0;
			down.velocity: 0,-2;
			kill: 1;
			guard.kill: 1;
			fall.kill: 1;
		}
	}
} else { # Game is finally playable! LOL
		if !movecontact || p2statetype = l {
		hitdef {
			attr: C,NA;
			hitflag: MAF;
			guardflag: L;
			animtype: back;
			air.animtype: back;
			pausetime: 10,0;
			damage: 120,18;
			sparkno: -1;
			guard.sparkno: -1;
			hitsound: f2,30 + random%2;
			guardsound: f3,0;
			ground.type: trip;
			ground.slidetime: 8;
			guard.slidetime: 8;
			ground.hittime: 8;
			guard.hittime: 8;
			air.hittime: 20;
			ground.velocity: -2,-2;
			guard.velocity: -4;
			air.velocity: -2,-2;
			p2facing: 1;
			ground.cornerpush.veloff: 0;
			forcestand: 1;
			fall: 1;
			fall.recover: 0;
			kill: 1;
			guard.kill: 1;
			fall.kill: 1;
		}
	}
}

# End of state.
if animtime = 0 {
	call StateEnd(0);
}

# ---------------------------------------------
# Crouch High Kick
[Statedef 400;
type: C;
movetype: A;
physics: C;
velset: 0,0;
ctrl: 0;
anim: 400;]

# Play a wind sound. Impactful!
if time = 3 {
	call ComSound(1,0 + 2*(random%2));
	call CharVoice(2,0 + random%2);
}

# Hitbox for the move.
if !movecontact {
	hitdef {
		attr: C,NA;
		hitflag: MAF;
		guardflag: M;
		animtype: light;
		air.animtype: back;
		pausetime: 15,0;
		damage: 72,18;
		sparkno: -1;
		guard.sparkno: -1;
		hitsound: f2,0 + random%2;
		guardsound: f3,1;
		ground.type: low;
		ground.slidetime: 12;
		guard.slidetime: 12;
		ground.hittime: 12;
		guard.hittime: 12;
		air.hittime: 20;
		ground.velocity: -4.5,0;
		guard.velocity: -5;
		air.velocity: -3.5,-6;
		p2facing: 1;
		ground.cornerpush.veloff: 0;
		air.fall: 1;
		fall.recover: 0;
		hitonce: 1;
		kill: 1;
		guard.kill: 1;
		fall.kill: 1;
	}
}

# End of state.
if animtime = 0 {
	call StateEnd(11);
}

# ---------------------------------------------
# Uppercut
[Statedef 410;
type: C;
movetype: A;
physics: N;
velset: 0,0;
ctrl: 0;
anim: 410;]

# Play a wind sound. Impactful!
if time = 3 {
	call ComSound(1,10 + 2*(random%2));
	call CharVoice(2,0 + random%2);
}

# I'm no longer crouching.
if animelem = 3 {
	statetypeset{statetype: S}
}

# Hitbox for the move.
if !movecontact {
	hitdef {
		attr: S,NA;
		hitflag: HAF;
		guardflag: MA;
		animtype: up;
		air.animtype: up;
		damage: 217,54;
		sparkno: -1;
		guard.sparkno: -1;
		hitsound: f2,20 + random%2;
		guardsound: f3,1;
		ground.type: high;
		ground.slidetime: 16;
		guard.slidetime: 16;
		ground.hittime: 16;
		guard.hittime: 16;
		air.hittime: 20;
		yaccel: 0.375;
		ground.velocity: -2,-12;
		guard.velocity: -4;
		air.velocity: -2,-12;
		p2facing: 1;
		ground.cornerpush.veloff: 0;
		fall: 1;
		fall.recover: 0;
		kill: 1;
		guard.kill: 1;
		fall.kill: 1;
	}
}

# Freeze upon hit.
if movehit = [1,57] || moveguarded = [1,32] {
	assertspecial{flag: animfreeze}
}

# Apply shake upon contact.
persistent(0) ignorehitpause if movecontact {
	call Shake(16,65,4);
}

# End of state.
if animtime = 0 {
	call StateEnd(0);
}

# ---------------------------------------------
# Crouch Low Punch
[Statedef 420;
type: C;
movetype: A;
physics: C;
velset: 0,0;
ctrl: 0;
anim: 420;]

# Change to MK1 behaviour.
if const(OpenMK.Char.CrouchAttacks) = 1 {
	call StateEnd(410);
}

# Play a wind sound. Impactful!
if time = 3 {
	call ComSound(1,0 + 2*(random%2));
	call CharVoice(2,0 + random%2);
}

# Hitbox for the move.
if !movecontact {
	hitdef {
		attr: C,NA;
		hitflag: MAF;
		guardflag: M;
		animtype: light;
		air.animtype: back;
		damage: 36,12;
		sparkno: -1;
		guard.sparkno: -1;
		hitsound: f2,0 + random%2;
		guardsound: f3,0;
		ground.type: low;
		ground.slidetime: 12;
		guard.slidetime: 12;
		ground.hittime: 12;
		guard.hittime: 12;
		air.hittime: 20;
		ground.velocity: -4,0;
		guard.velocity: -2;
		air.velocity: -2,-6;
		p2facing: 1;
		ground.cornerpush.veloff: 0;
		air.fall: 1;
		fall.recover: 0;
		hitonce: 1;
		kill: 1;
		guard.kill: 1;
		fall.kill: 1;
	}
}

# Skip pause time. MK does it like this, IDK why.
persistent(0) if movecontact {
	changeanim{value: anim; elem: 5}
}

# End of state.
if animtime = 0 {
	call StateEnd(11);
}

# ---------------------------------------------
# Crouch Low Kick
[Statedef 430;
type: C;
movetype: A;
physics: C;
velset: 0,0;
ctrl: 0;
anim: 430;]

# Change to MK1 behaviour.
if const(OpenMK.Char.CrouchAttacks) = 1 {
	call StateEnd(400);
}

# Play a wind sound. Impactful!
if time = 3 {
	call ComSound(1,0 + 2*(random%2));
	call CharVoice(2,0 + random%2);
}

# Hitbox for the move.
if !movecontact {
	hitdef {
		attr: C,NA;
		hitflag: MAF;
		guardflag: M;
		animtype: light;
		air.animtype: back;
		pausetime: 5,0;
		damage: 48,12;
		sparkno: -1;
		guard.sparkno: -1;
		hitsound: f2,0 + random%2;
		guardsound: f3,0;
		ground.type: low;
		ground.slidetime: 12;
		guard.slidetime: 12;
		ground.hittime: 12;
		guard.hittime: 12;
		air.hittime: 20;
		ground.velocity: -3,0;
		guard.velocity: -3;
		air.velocity: -3.5,-6;
		p2facing: 1;
		ground.cornerpush.veloff: 0;
		air.fall: 1;
		fall.recover: 0;
		hitonce: 1;
		kill: 1;
		guard.kill: 1;
		fall.kill: 1;
	}
}

# End of state.
if animtime = 0 {
	call StateEnd(11);
}

# ---------------------------------------------
# Air Kick
[Statedef 600;
type: A;
movetype: A;
physics: A;
ctrl: 0;
anim: 600;]

# Play a wind sound. Impactful!
if time = 3 {
	call ComSound(1,10 + 2*(random%2));
	call CharVoice(2,0 + random%2);
}

# Hitbox for the move.
if !movecontact {
	hitdef {
		attr: A,NA;
		hitflag: MAF;
		guardflag: MA;
		animtype: light;
		air.animtype: back;
		damage: 114,36;
		sparkno: -1;
		guard.sparkno: -1;
		hitsound: f2,10 + 2*(random%2);
		guardsound: f3,1;
		ground.type: high;
		ground.slidetime: 12;
		guard.slidetime: 12;
		ground.hittime: 12;
		guard.hittime: 12;
		air.hittime: 20;
		ground.velocity: -1,0;
		guard.velocity: -2;
		air.velocity: -3.5,-6;
		air.fall: 1;
		fall.recover: 0;
		kill: 1;
		guard.kill: 1;
		fall.kill: 1;
	}
}

persistent(0) if movecontact { # End of state.
	call StateEnd(630);
}

# ---------------------------------------------
# Air Punch
[Statedef 610;
type: A;
movetype: A;
physics: A;
ctrl: 0;
anim: 610;]

# Behind you!
if time = 0 && p2dist x < 0 {
	turn{}
}

# Play a wind sound. Impactful!
if time = 3 {
	call ComSound(1,10 + 2*(random%2));
	call CharVoice(2,0 + random%2);
}

# Hitbox for the move.
if !movecontact {
	hitdef {
		attr: A,NA;
		hitflag: MAF;
		guardflag: MA;
		animtype: light;
		air.animtype: back;
		damage: 96,30;
		sparkno: -1;
		guard.sparkno: -1;
		hitsound: f2,10 + 2*(random%2);
		guardsound: f3,1;
		ground.type: high;
		ground.slidetime: 16;
		ground.hittime: 16;
		air.hittime: 20;
		ground.velocity: -1,0;
		air.velocity: -3.5,-4;
		p2facing: 1;
		air.fall: 1;
		fall.recover: 0;
		kill: 1;
		guard.kill: 1;
		fall.kill: 1;
	}
}

persistent(0) if movecontact { # End of state.
	call StateEnd(630);
}

# ---------------------------------------------
# Leap Kick
[Statedef 620;
type: A;
movetype: A;
physics: A;
ctrl: 0;
anim: 620;]

# Behind you!
if time = 0 && p2dist x < 0 {
	turn{}
}

# Play a wind sound. Impactful!
if time = 3 {
	call ComSound(1,10 + 2*(random%2));
	call CharVoice(2,0 + random%2);
}

# Hitbox for the move.
if !movecontact {
	hitdef {
		attr: A,NA;
		hitflag: MAF;
		guardflag: MA;
		animtype: back;
		air.animtype: back;
		damage: 157,42;
		sparkno: -1;
		guard.sparkno: -1;
		hitsound: f2,10 + 2*(random%2);
		guardsound: f3,1;
		ground.type: high;
		ground.slidetime: 11;
		guard.slidetime: 11;
		ground.hittime: 11;
		guard.hittime: 11;
		air.hittime: 20;
		ground.velocity: -3,-8;
		guard.velocity: -2;
		air.velocity: -3.5,-6;
		p2facing: 1-2*(p2dist x < 0);
		fall: 1;
		fall.recover: 0;
		kill: 1;
		guard.kill: 1;
		fall.kill: 1;
	}
}

persistent(0) if movecontact { # End of state.
	call StateEnd(630);
}

# ---------------------------------------------
# Connected hit
[Statedef 630;
type: A;
movetype: A;
physics: A;
ctrl: 0;]

# Shake!
persistent(0) if prevstateno != 620 {
	call Shake(16,65,4);
} else { # If move was blocked.
	ignorehitpause if enemy,stateno = [150,159] {
		targetvelset{x: -3}
	}
}

# Hit animation.
if time = 0 {
	changeanim{value: anim + 1}
}

# Don't fall yet!
if prevstateno = [600,620] && time < 7 {
	velset{x: 0; y: 0}
}